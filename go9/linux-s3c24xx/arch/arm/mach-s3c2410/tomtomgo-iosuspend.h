/* Special cases when going into suspend mode (default is deactivation on suspend) */

inline void IO_SuspendDetectionPins(void)
{
	// Make sure no current is drawn by hardware detection resistors
	IO_Suspend(TYPE_MAIN_ID0);
	IO_Suspend(TYPE_MAIN_ID1);
	IO_Suspend(TYPE_MAIN_ID2);
	IO_Suspend(TYPE_NEC_LCD);
	IO_Suspend(TYPE_SUB_ID0);
	IO_Suspend(TYPE_SUB_ID1);
	IO_Suspend(FLEX_ID1);
	IO_Suspend(FLEX_ID2);
	IO_Suspend(LCD_ID);
	IO_Suspend(PIC_DETECT);
}

inline void IO_InitSuspend(void)
{
	// Make sure no current is drawn by hardware detection resistors
	if (IO_GetInput(TYPE_MAIN_ID0)) PIN_ADD_MASK(TYPE_MAIN_ID0, PIN_ACTIVATE_ON_SUSPEND);
	if (IO_GetInput(TYPE_MAIN_ID1)) PIN_ADD_MASK(TYPE_MAIN_ID1, PIN_ACTIVATE_ON_SUSPEND);
	if (IO_GetInput(TYPE_MAIN_ID2)) PIN_ADD_MASK(TYPE_MAIN_ID2, PIN_ACTIVATE_ON_SUSPEND);
	if (IO_GetInput(TYPE_NEC_LCD))  PIN_ADD_MASK(TYPE_NEC_LCD , PIN_ACTIVATE_ON_SUSPEND);
	if (IO_GetInput(TYPE_SUB_ID0))  PIN_ADD_MASK(TYPE_SUB_ID0 , PIN_ACTIVATE_ON_SUSPEND);
	if (IO_GetInput(TYPE_SUB_ID1))  PIN_ADD_MASK(TYPE_SUB_ID1 , PIN_ACTIVATE_ON_SUSPEND);
	if (IO_GetInput(FLEX_ID1))      PIN_ADD_MASK(FLEX_ID1     , PIN_ACTIVATE_ON_SUSPEND);
	if (IO_GetInput(FLEX_ID2))      PIN_ADD_MASK(FLEX_ID2     , PIN_ACTIVATE_ON_SUSPEND);
	if (IO_HasPin(LCD_ID))          PIN_ADD_MASK(LCD_ID	  , PIN_INPUT_ON_SUSPEND);
	if (IO_HavePicDetected())	      PIN_ADD_MASK(PIC_DETECT   , PIN_INPUT_ON_SUSPEND);
	
	// Other pins which need to be low or high or input
	PIN_ADD_MASK(CD_SD             , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(WP_SD             , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(EN_SD             , PIN_ACTIVATE_ON_SUSPEND);
	PIN_ADD_MASK(CHARGEFAULT       , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(CHARGING          , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(BATT_TEMP_OVER    , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(LIGHTS_DETECT     , PIN_INPUT_ON_SUSPEND);
	if (IO_HaveCagliariDock()) {
		PIN_SET_MASK(DOCK_SENSE        , PIN_DEACTIVATE_ON_SUSPEND);
		PIN_SET_MASK(DOCK_SENSE1       , PIN_DEACTIVATE_ON_SUSPEND);
	} else {
	PIN_ADD_MASK(DOCK_SENSE        , PIN_INPUT_ON_SUSPEND);
		PIN_ADD_MASK(DOCK_SENSE1       , PIN_INPUT_ON_SUSPEND);
	}
	if( (IO_HaveRiderDock( )) && ((IO_GetModelId( ) == GOTYPE_RIDER3) || (IO_GetModelId( ) == GOTYPE_RIDER5)) )
	{
		PIN_ADD_MASK(DOCK_MOTOR_SENSE	, PIN_INPUT_ON_SUSPEND);
	}
	PIN_ADD_MASK(DOCK_CRIB_SENSE   , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(DOCK_RADIO_SENSE  , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(DOCK_INT          , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(LINEIN_DETECT     , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(FSK_IRQ           , PIN_INPUT_ON_SUSPEND);
	if (IO_HaveSPI() || IO_HaveRemote())
	{
		PIN_ADD_MASK(SPIMSO            , PIN_INPUT_ON_SUSPEND);
		if (IO_HaveDeadReckoning()) {
			PIN_ADD_MASK(SPIMSO      , PIN_DEACTIVATE_ON_SUSPEND);
			PIN_SET_MASK(BARO_SPI_IRQ, PIN_DEACTIVATE_ON_SUSPEND);
			PIN_ADD_MASK(BARO_SPI_CSB, PIN_ACTIVATE_ON_SUSPEND);
		}
	}

	PIN_ADD_MASK(HEADPHONE_DETECT  , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(EXTMIC_DETECT     , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(CTS_DOCK          , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(RTS_DOCK          , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(TXD_DOCK          , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(RXD_DOCK          , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(RXD_DOCK_INT      , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(RXD_BT            , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(CTS_BT            , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(USB_HOST_DETECT   , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(ON_OFF            , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(IGNITION          , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(LOW_DC_VCC        , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(ACPWR             , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(HDD_IRQ           , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(HDD_LED           , PIN_ACTIVATE_ON_SUSPEND);
	PIN_ADD_MASK(HDD_RST           , PIN_ACTIVATE_ON_SUSPEND);
	PIN_ADD_MASK(USB_RST           , PIN_ACTIVATE_ON_SUSPEND);
	PIN_ADD_MASK(LCD_RESET         , PIN_ACTIVATE_ON_SUSPEND);
	PIN_ADD_MASK(LCD_CS            , PIN_ACTIVATE_ON_SUSPEND);
	PIN_ADD_MASK(BT_RESET          , PIN_ACTIVATE_ON_SUSPEND);
	PIN_ADD_MASK(BT_MODE           , PIN_ACTIVATE_ON_SUSPEND);
	PIN_ADD_MASK(USB_DREQ          , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(USB_IRQ           , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(USB_HP            , PIN_ACTIVATE_ON_SUSPEND);
	PIN_ADD_MASK(CAM_DPWDN         , PIN_ACTIVATE_ON_SUSPEND);
	PIN_ADD_MASK(FACTORY_TEST_POINT, PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(XPON              , PIN_ACTIVATE_ON_SUSPEND);
	PIN_ADD_MASK(YPON              , PIN_ACTIVATE_ON_SUSPEND);
	PIN_ADD_MASK(GSM_SYNC          , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(GSM_WAKEUP        , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(UART_PWRSAVE      , PIN_ACTIVATE_ON_SUSPEND);
	PIN_ADD_MASK(UART_RXD_IPOD     , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(UART_RXD_TMC      , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(UART_INTA         , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(UART_INTB         , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(UART_RESET        , PIN_ACTIVATE_ON_SUSPEND);
	PIN_ADD_MASK(MEP_DAT           , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(MEP_ACK           , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(TOUCHPAD_SW       , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(MEP_CLK           , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(ACC_SPI_CSB       , PIN_ACTIVATE_ON_SUSPEND);
	PIN_ADD_MASK(CMP_SPI_CSB       , PIN_ACTIVATE_ON_SUSPEND);
	PIN_ADD_MASK(DR_CMP_RST        , PIN_ACTIVATE_ON_SUSPEND);
	if (IO_HaveDeadReckoning()) {
		PIN_ADD_MASK(DRDY_INT          , PIN_DEACTIVATE_ON_SUSPEND);
		PIN_ADD_MASK(FM_RDS_INT	       , PIN_DEACTIVATE_ON_SUSPEND);
		PIN_ADD_MASK(FM_TX_INT         , PIN_DEACTIVATE_ON_SUSPEND);
	}
	PIN_ADD_MASK(FM_RST            , PIN_ACTIVATE_ON_SUSPEND);
	if ( PIN_IS_INVERTED(IO_Pin(EN_FM_RCLK)) ) {
		PIN_ADD_MASK(EN_FM_RCLK, PIN_ACTIVATE_ON_SUSPEND);
	}

	if ( (IO_GetModelId() == GOTYPE_FLORENCE) )
	{
		PIN_ADD_MASK(GSM_RXD           , PIN_DEACTIVATE_ON_SUSPEND);
		PIN_ADD_MASK(GSM_CTS           , PIN_DEACTIVATE_ON_SUSPEND);
		PIN_ADD_MASK(GSM_TXD           , PIN_DEACTIVATE_ON_SUSPEND);
		PIN_ADD_MASK(GSM_RTS           , PIN_DEACTIVATE_ON_SUSPEND);
	}
	else
	{
		PIN_ADD_MASK(GSM_RXD           , PIN_INPUT_ON_SUSPEND);
		PIN_ADD_MASK(GSM_CTS           , PIN_INPUT_ON_SUSPEND);
	}

	PIN_ADD_MASK(GSM_DSR           , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(GSM_DCD           , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(GSM_RING          , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(GSM_PORT_SEL      , PIN_ACTIVATE_ON_SUSPEND);
	PIN_ADD_MASK(GSM_RESET         , PIN_ACTIVATE_ON_SUSPEND);
	PIN_ADD_MASK(I2C_SWPWR         , PIN_ACTIVATE_ON_SUSPEND);
	PIN_ADD_MASK(DOCK_DET_PWREN    , PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(RDS_RST	       , PIN_ACTIVATE_ON_SUSPEND);

	/* movinand power only controlled by the drivers */
	PIN_ADD_MASK(HS_MOVI_PWR_ON    , PIN_IGNORE_ON_SUSPEND);
	PIN_ADD_MASK(MOVI_PWR_ON       , PIN_IGNORE_ON_SUSPEND);

	if (IO_HaveHardwareI2C())
	{
		// S3C2412 cannot set these output high in sleep mode, only input mode is possible
		PIN_ADD_MASK(HW_IIC_SDA        , PIN_INPUT_ON_SUSPEND);
		PIN_ADD_MASK(HW_IIC_SCL        , PIN_INPUT_ON_SUSPEND);
	}

	PIN_ADD_MASK(RXD_GPS	     , PIN_INPUT_ON_SUSPEND);
	switch (IO_GetGpsType()) {
		/* GL type chips */
		case GOGPS_GL_BCM4750:
			PIN_ADD_MASK(GPS_STANDBY     , PIN_ACTIVATE_ON_SUSPEND);
			PIN_ADD_MASK(GPS_1PPS	     , PIN_INPUT_ON_SUSPEND);
			/* fallthrough */
		case GOGPS_GL:
		case GOGPS_GL_INT_LNA:
		PIN_ADD_MASK(GPS_REPRO       , PIN_INPUT_ON_SUSPEND);  
			break;			

		/* SiRF chips */
		case GOGPS_SIRF1:
		case GOGPS_SIRF2:
		case GOGPS_SIRF3:
		PIN_ADD_MASK(GPS_RESET       , PIN_ACTIVATE_ON_SUSPEND);
			break;

		/* Athereos type chips */
		case GOGPS_ATH_AR1520:
			PIN_ADD_MASK(TXD_GPS	     , PIN_INPUT_ON_SUSPEND);
			PIN_ADD_MASK(RXD_GPS	     , PIN_INPUT_ON_SUSPEND);
			PIN_ADD_MASK(GPS_1PPS	     , PIN_INPUT_ON_SUSPEND);
		break;
		default:
			return;
	}

	PIN_ADD_MASK(CAM_DIRQ, PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(HU_PWR_ON,PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(SW_SDA,   PIN_INPUT_ON_SUSPEND);
	PIN_ADD_MASK(CAMRESET, PIN_ACTIVATE_ON_SUSPEND);
	PIN_ADD_MASK(CAM_DPWDN,PIN_ACTIVATE_ON_SUSPEND);
	PIN_ADD_MASK(RXD_HU,   PIN_ACTIVATE_ON_SUSPEND);
	PIN_ADD_MASK(UART_CLK, PIN_ACTIVATE_ON_SUSPEND);

	// PMU driver decides if this pin is high or low in suspend
	PIN_ADD_MASK(USB_PWR_BYPASS, PIN_IGNORE_ON_SUSPEND);
}
