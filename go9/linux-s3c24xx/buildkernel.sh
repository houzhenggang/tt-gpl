#!/bin/sh -e

# Default settings
verfile="tomtom.ver"
defcfg="config-default"
curcfg=".config"
update="n"
rebuild="n"
clean="n"
makeflags="-w"
makedefs="V=0"
makejobs="-j 4"
locver="localversion"
releasedir="../release/s3c24xx"
releasebindir=$releasedir
releaseinc="include/linux/fm2010.h include/linux/fmtransmitter.h include/linux/watchdog.h include/linux/fmreceiver.h include/linux/fb.h include/linux/input.h include/linux/netlink.h include/linux/hiddev.h include/linux/si4710.h"

# Environment for building
export ARCH="arm"
export CROSS_COMPILE="arm-linux-"

die() {
  echo "$0: ERROR: $1!"
  exit 1
}

usage() {
  echo "Usage: $0 {update|rebuild|clean|silent|verbose|single|release}"
  exit 1
}

get_version() {
  if ! p4out=$(p4 where ... 2>&1); then
    die "You need to set your P4CLIENT environment variable correctly"
  fi
  if ! p4out=$(p4 opened -m 1 ... 2>&1); then
    die "Perforce command \"p4 opened -m 1\" failed: ${p4out}"
  fi
  if ! echo "${p4out}" | grep -Fq "... - file(s) not opened on this client."; then
    dirty="y"
  else
    dirty="n"
  fi
  if test "${update}" = "y" -a "${dirty}" = "y"; then
    die "You have files open for editing, submit your changes first"
  fi
  if ! p4out=$(p4 changes -m 1 -s submitted ...#have 2>&1); then
    die "Perforce command \"p4 changes -m 1 -s submitted ...#have\" failed: ${p4out}"
  fi
  TTVER=$(echo "${p4out}" | awk '{print $2}')
  if test "${dirty}" = "y"; then
    if test "${release}" = "y"; then
      die "CAN'T DO DIRTY RELEASE BUILDS!!!"
    fi 
    TTVER=$((${TTVER}+1000000000))
  fi
  if ! cat > ${verfile} << __EOT__
# This file generated by $0, DO NOT EDIT

TTVER=${TTVER}

# EOF
__EOT__
  then
    die "Unable to write version file ${verfile}"
  fi
}

make_clean() {
  echo "**** Cleaning..."
  nice make ${makeflags} ${makedefs} distclean
}

make_config() {
  echo "**** Configuring with ${defcfg}..."
  cat "${defcfg}" > "${curcfg}"
  [ "${mmc_logging}" = "y" ] && echo "CONFIG_MMC_TRANSFER_LOGGING=y" >> "${curcfg}"
  nice make ${makeflags} ${makedefs} silentoldconfig
}

make_build() {
  echo "**** Building..."
  nice make ${makeflags} ${makejobs} ${makedefs}
}

make_release() {
  echo "**** Releasing..."
 
  if ! p4out=$(p4 integrate -o include/barcelona/... ${releasedir}/include/barcelona/... 2>&1); then
    die "Perforce command \"p4 integrate include/barcelona\" failed: ${p4out}"
  fi

  for i in ${releaseinc}; do 
    if ! p4out=$(p4 integrate -o $i ${releasedir}/$i 2>&1); then
      die "Perforce command \"p4 integrate $i\" failed: ${p4out}"
    fi
  done

  if ! p4out=$(p4 edit ${releasebindir}/... 2>&1); then
    die "Perforce command \"p4 edit\" failed: ${p4out}"
  fi
  if ! cpout=$(cp -p arch/arm/boot/zImage System.map tomtom.ver vmlinux ${releasebindir} && bzip2 -f ${releasebindir}/vmlinux); then
    die "cp to ${releasebindir} failed"
  fi

  echo
  echo "*****************************************"
  echo "*                                       *"
  echo "* Please submit your pending ../release *"
  echo "*                                       *"
  echo "*****************************************"
  echo
}


# Main starts here
while test -n "$1"; do
  case "$1" in
  update)
    update="y"
    ;;
  rebuild)
    rebuild="y"
    ;;
  clean)
    clean="y"
    ;;
  silent)
    makeflags="-ws"
    makedefs="V=0"
    ;;
  verbose)
    makeflags="-w"
    makedefs="V=1"
    ;;
  single)
    makejobs=""
    ;;
  release)
    rebuild="y"
    release="y"
    ;;
  config-*)
    if test ! -f "$1"; then
      die "$1 does not exist!"
    fi
    if test -f "${curcfg}" && ! rm -f "${curcfg}"; then
      die "Unable to remove ${curcfg}!"
    fi
    defcfg="$1"
    releasebindir=$releasedir/$1
    ;;
  mmc_logging)
    mmc_logging="y"
    ;;
  *)
    usage
    ;;
  esac
  shift
done

get_version

# Set up our local version suffix
echo "-tt${TTVER}" > ${locver}

if test "${dirty}" = "y"; then
  echo "**** Processing kernel #${TTVER}... (CONTAINS UNSUBMITTED CHANGES)"
else
  echo "**** Processing kernel #${TTVER}..."
fi

if test "${rebuild}" = "y"; then
  make_clean
  make_config
elif test "${clean}" = "y"; then
  make_clean
  rm -f ${verfile} ${locver}
  echo "**** Successfully cleaned kernel #${TTVER}."
  exit 0
elif test ! -f "${curcfg}" -o "${defcfg}" -nt "${curcfg}"; then
  make_config
fi

make_build

if test "${release}" = "y"; then
  make_release
fi

echo "**** Successfully built kernel #${TTVER}:"
ls -l arch/arm/boot/zImage

# EOF
