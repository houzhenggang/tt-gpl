#!/bin/bash

# Default settings
verfile="tomtom.ver"
archpath="./arch/arm/"
cfgpath="${archpath}configs/"
cfgext="_defconfig"
targetcfg="torinos"
platform="s3c64xx"
kernel_defcfg="${cfgpath}${targetcfg}${cfgext}"
curcfg=".config"
update="n"
rebuild="n"
clean="n"
release="n"
makeflags="-w"
makedefs="V=0"
makejobs="-j 4"
nostrip="n"
releaseinc="include/linux/fmtransmitter.h include/linux/gadc.h include/config/kernel.release include/video/s3cfb.h"

# Environment for building
export ARCH="arm"
export CROSS_COMPILE="arm-tomtom-linux-gnueabi-2009q1_203-"

die() {
  echo "$0: ERROR: $1!"
  exit 1
}

usage() {
  echo "Usage: $0 {update|rebuild|clean|silent|verbose|single|release} [config=xxxx_defconfig]"
  exit 1
}

get_version() {
  if ! p4out=$(p4 where ... 2>&1); then
    die "You need to set your P4CLIENT environment variable correctly"
  fi
  if ! p4out=$(p4 opened -m 1 ... 2>&1); then
    die "Perforce command \"p4 opened -m 1\" failed: ${p4out}"
  fi
  if ! echo "${p4out}" | grep -Fq "... - file(s) not opened on this client."; then
    dirty="y"
  else
    dirty="n"
  fi
  if test "${update}" = "y" -a "${dirty}" = "y"; then
    die "You have files open for editing, submit your changes first"
  fi
  if ! p4out=$(p4 changes -m 1 -s submitted ...#have 2>&1); then
    die "Perforce command \"p4 changes -m 1 -s submitted ...#have\" failed: ${p4out}"
  fi
  TTVER=$(echo "${p4out}" | awk '{print $2}')
  if test "${dirty}" = "y"; then
    TTVER=$((${TTVER}+1000000000))
  fi
  if ! cat > ${verfile} << __EOT__
# This file generated by $0, DO NOT EDIT

TTVER=${TTVER}

# EOF
__EOT__
  then
    die "Unable to write version file ${verfile}"
  fi
}

make_clean() {
	echo "**** Cleaning Kernel ..."
	nice make ${makeflags} ${makedefs} distclean

	rm -f -r ${releasedir}/arch/arm/plat-tomtom/

	for i in ${releaseinc}; do 
		rm ${releasedir}/$i 2>/dev/null
	done

	rm -f ${releasedir}/tomtom.ver
	rm -f ${releasedir}/System.map
	rm -f ${releasedir}/zImage
	rm -f ${releasedir}/vmlinux*
	rm -f ${releasedir}/modules.tar.bz2
	rm -f ${releasedir}/${targetcfg}.dtb
}

make_config() {
  echo "**** Configuring Kernel with ${kernel_defcfg}..."
  cat "${kernel_defcfg}" > "${curcfg}"
  nice make ${makeflags} ${makedefs} silentoldconfig
}

make_build() {
  echo "**** Building Kernel ..."
  nice make ${makeflags} ${makejobs} ${makedefs} uImage || \
    die "Building of kernel failed"
}

make_modules() {
  echo "**** Building Kernel modules ..."
  nice make ${makeflags} ${makejobs} ${makedefs} modules || \
    die "Building of modules failed"

  if test ${nostrip} = "n"; then
    echo "*** Stripping modules..."
    for mod in `find . -name \*.ko`; do
	${CROSS_COMPILE}strip --strip-debug ${mod}
    done
  fi
}

make_release() {
  echo "**** Releasing Kernel in ${releasedir}..."

  rm -rf ${releasedir}/arch/arm/plat-tomtom/include/ 2>&1 > /dev/null
  mkdir -p ${releasedir}/arch/arm/plat-tomtom/include/

  if ! cpout=$(cp -pR arch/arm/plat-tomtom/include ${releasedir}/arch/arm/plat-tomtom/ 2>&1); then
    die "Perforce command \"cp to ${releasedir}/arch/arm/plat-tomtom/include\" failed: ${cpout}"
  fi

  for i in ${releaseinc}; do 
    if ! cpout=$(install -D $i ${releasedir}/$i 2>&1); then
      die "cp to \"${releasedir}/$i\" failed: ${cpout}"
    fi
  done

  if ! cpout=$(install -D arch/arm/boot/zImage System.map tomtom.ver vmlinux ${releasedir} && bzip2 -f ${releasedir}/vmlinux); then
    die "cp to ${releasedir} failed"
  fi
  if ! cpout=$(install -D include/config/kernel.release ${releasedir}/include/config); then
    die "cp to ${releasedir} failed"
  fi
  INSTALL_MOD_PATH=.tt_tmp_mod_install make modules_install
  tar -C .tt_tmp_mod_install --exclude build --exclude source -cjf ${releasedir}/modules.tar.bz2 . && rm -r .tt_tmp_mod_install

  # build dtc 
  ../tools/bin/dtc -O dtb -o ${releasedir}/${targetcfg}.dtb arch/arm/plat-tomtom/dts/${targetcfg}.dts

  echo
  echo "********************************************"
  echo "*                                          *"
  echo "* Kernel Release                           *"
  echo "*                                          *"
  echo "********************************************"
  echo
}

# Main starts here
while test -n "$1"; do
  case "$1" in
  nostrip)
    nostrip="y"
    ;;
  update)
    update="y"
    ;;
  rebuild)
    rebuild="y"
    ;;
  clean)
    clean="y"
    ;;
  silent)
    makeflags="-ws"
    makedefs="V=0"
    ;;
  verbose)
    makeflags="-w"
    makedefs="V=1"
    ;;
  single)
    makejobs=""
    ;;
  release)
    release="y"
    ;;
  otavalo|otavalo_nav2|bcm4760|irvine|siena|lucca|foggia|arezzo|catania_b|messina|lausanne|geneva_b4|geneva_b5|sarnen)
    targetcfg="bcm4760"
    kernel_defcfg="${cfgpath}${targetcfg}${cfgext}"
    platform="bcm4760"
    ;;
  cordoba|cordoba_nav2|cordoba_s5m8751|cordoba_s5m8751_nav2)
    targetcfg="$1"
    kernel_defcfg="${cfgpath}${targetcfg}${cfgext}"
    platform="s5p6440"
    ;;
  smdk6440_nav2)
    targetcfg="$1"
    kernel_defcfg="${cfgpath}${targetcfg}${cfgext}"
    platform="s5p6440"
    ;;
  otavalo_flasher|irvine_flasher|siena_flasher|lucca_flasher|foggia_flasher|arezzo_flasher|catania_b_flasher|messina_flasher|lausanne_flasher|geneva_b4_flasher|geneva_b5_flasher|sarnen_flasher)
    targetcfg="$1"
    kernel_defcfg="${cfgpath}${targetcfg}${cfgext}"
    echo "BUILDING with: $kernel_defcfg"
    platform="bcm4760"
    ;;
  torinos_nav2|seoul_nav2|beaumont_11_nav2|lima_nav2|havana_nav2|venice_nav2|lima|venice|havana|torinos|catania_s)
    targetcfg="$1"
    kernel_defcfg="${cfgpath}${targetcfg}${cfgext}"
    platform="s5p6440"
    ;;
  torinos_cap_touch_screen_synaptic|torinos_cap_touch_screen_cypress)
    targetcfg="$1"
    kernel_defcfg="${cfgpath}torinos${cfgext}"
    platform="s5p6440"
    ;;
  torinos_flasher|seoul2ext2_flasher)
    targetcfg="$1"
    kernel_defcfg="${cfgpath}${targetcfg}${cfgext}"
    platform="s3c64xx"
    ;;
  config=*)
    kernel_defcfg="$1"
    kernel_defcfg="${cfgpath}/${kernel_defcfg:7}"
    if test ! -f "${kernel_defcfg}"; then
      die "${kernel_defcfg} does not exist!"
    fi
    if test -f "${curcfg}" && ! rm -f "${curcfg}"; then
      die "Unable to remove ${curcfg}!"
    fi
    #targetcfg=`basename ${kernel_defcfg} | sed "s/_defconfig//"`
    ;;
  *)
    usage
    ;;
  esac
  shift
done

echo "************************ $kernel_defcfg"

get_version

# Set up our local version suffix
# echo "-tt${TTVER}" > localversion
# rm localversion

if test "${dirty}" = "y"; then
  echo "**** Processing kernel #${TTVER}... (CONTAINS UNSUBMITTED CHANGES)"
else
  echo "**** Processing kernel #${TTVER}..."
fi

# Set up the release dir now. It will be used in either make_release or make_clean
  releasedir="../release/${platform}/${targetcfg}"

if test "${rebuild}" = "y"; then
  make_clean
  make_config
elif test "${clean}" = "y"; then
  make_clean
  echo "**** Successfully cleaned kernel #${TTVER}."
  exit 0
elif test ! -f "${curcfg}" -o "${kernel_defcfg}" -nt "${curcfg}"; then
  make_config
fi

chmod -c --quiet 644 ${curcfg}
echo "CONFIG_TOMTOM_VERSION=${TTVER}" >> ${curcfg}

make_modules
make_build

if test "${release}" = "y"; then
  make_release
fi

echo "**** Successfully built kernel #${TTVER}:"
ls -l arch/arm/boot/*Image

# EOF
